{{#validator-description
  name="requiredUnlessData"
  localesKey="required"
  defaultMessage="can't be blank"
}}
  Checks whether given field is filled in (uses <code>Ember.isNone</code>) <strong>but</strong> it's only checked if the key <code>dataKey</code> is not truthy in the <strong>data</strong> hash.
  It basically allows to turn off the <code>required</code> validation in certain circumstances.
{{/validator-description}}

<h3>Usage:</h3>
{{#code-sample lang="js"}}
firstname: 'requiredUnlessData(foo)'
{{/code-sample}}

<h3>Example:</h3>
{{#code-sample lang="js"}}
// would throw error only if foo key in the
//data hash would not have a truthy value
firstName: 'requiredUnlessData(foo)'
{{/code-sample}}

<p>It would however mark the field as valid if we passed a following <code>data</code> object to our <code>lf-form</code> component:</p>

{{#code-sample lang="js" title="components/some-components/component.js"}}
import Ember from 'ember';
const { Component } = Ember;
export default Component.extend({
  data: {
    foo: true
  },

  rules: {
    firstName: 'requiredUnlessData(foo)'
  }
});
{{/code-sample}}

<br>

{{#code-sample lang="handlebars" title="components/some-component/template.hbs"}}
\{{#lf-form data=data rules=rule as |validateFunc}}
  \{{!-- inputs go here --}}
\{{/lf-form}}
{{/code-sample}}
